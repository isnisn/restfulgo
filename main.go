package main

import (
	"database/sql"

	"fmt"
	"log"
	"net/http"
	"os"
	"rest_api_go/handlers"

	"rest_api_go/middleware"
	"rest_api_go/repositories"
	"rest_api_go/services"

	"github.com/gorilla/mux"
	_ "github.com/lib/pq"

	httpSwagger "github.com/swaggo/http-swagger/v2"

	"rest_api_go/docs" // docs is generated by Swag CLI, you have to import it.
)

/* initDB creates a new database connection and returns it */
func initDB() *sql.DB {
	var err error
	host := os.Getenv("POSTGRES_HOST")
	port := os.Getenv("POSTGRES_PORT")
	user := os.Getenv("POSTGRES_USER")
	password := os.Getenv("POSTGRES_PASSWORD")
	dbname := os.Getenv("POSTGRES_DB")

	fmt.Println("Connecting to:")
	fmt.Printf("Host: %s\n", host)
	fmt.Printf("Port: %s\n", port)
	fmt.Printf("User: %s\n", user)

	connStr := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		host, port, user, password, dbname)

	db, err := sql.Open("postgres", connStr)
	if err != nil {

		log.Fatalf("Error opening database: %v", err)
	}

	if err := db.Ping(); err != nil {
		log.Fatalf("Failed to connect to the database: %v", err)
	}

	return db
}

func main() {

	db := initDB()
	defer db.Close()

	// Create a new repository and service
	repo := repositories.NewPostgresDeviceRepository(db)
	deviceService := services.NewDeviceService(repo)

	// Inject the service into the handlers
	handlers.SetDeviceService(deviceService)

	userRepo := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepo)
	handlers.SetUserService(userService)

	defaultPort := "8080"

	port := os.Getenv("PORT")
	if port == "" {
		port = defaultPort
	}

	docs.SwaggerInfo.Title = "Swagger Example API"
	docs.SwaggerInfo.Description = "This is a sample server Petstore server."
	docs.SwaggerInfo.Version = "1.0"
	docs.SwaggerInfo.Host = "petstore.swagger.io"
	docs.SwaggerInfo.BasePath = "/v2"
	docs.SwaggerInfo.Schemes = []string{"http", "https"}

	r := mux.NewRouter()
	r.HandleFunc("/login", handlers.LoginHandler).Methods(http.MethodPost)
	r.HandleFunc("/user", handlers.RegisterUserHandler).Methods(http.MethodPost)
	r.HandleFunc("/user/{username}", handlers.RemoveUserHandler).Methods(http.MethodDelete)
	r.PathPrefix("/swagger/").Handler(httpSwagger.Handler(
		httpSwagger.URL("http://localhost:8080/swagger/doc.json"), //The url pointing to API definition
		httpSwagger.DeepLinking(true),
		httpSwagger.DocExpansion("none"),
		httpSwagger.DomID("swagger-ui"),
	)).Methods(http.MethodGet)

	// REST routes
	r.Handle("/devices", middleware.JWTMiddleware(http.HandlerFunc(handlers.GetDevicesHandler))).Methods(http.MethodGet)
	r.Handle("/devices/{id}", middleware.JWTMiddleware(http.HandlerFunc(handlers.GetDeviceHandler))).Methods(http.MethodGet)
	r.Handle("/devices", middleware.JWTMiddleware(http.HandlerFunc(handlers.CreateDeviceHandler))).Methods(http.MethodPost)
	r.Handle("/devices/{id}", middleware.JWTMiddleware(http.HandlerFunc(handlers.UpdateDeviceHandler))).Methods(http.MethodPut)
	r.Handle("/devices/{id}", middleware.JWTMiddleware(http.HandlerFunc(handlers.PatchDeviceHandler))).Methods(http.MethodPatch)
	r.Handle("/devices/{id}", middleware.JWTMiddleware(http.HandlerFunc(handlers.DeleteDeviceHandler))).Methods(http.MethodDelete)

	log.Fatal(http.ListenAndServe(":"+port, r))
}
